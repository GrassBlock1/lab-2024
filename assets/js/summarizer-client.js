// Example script. You may change it to suit needs.
// Generated by gemini
(function() {
    // --- Configuration ---
    const WORKER_URL = 'https://gemini-summarizer-worker.grassblock.workers.dev'; // <-- REPLACE with your worker URL
    const ARTICLE_CONTENT_SELECTOR = 'div.article-content'; // <-- REPLACE with the CSS selector for your article content container
    const SUMMARY_BUTTON_ID = 'summarize-button';
    const SUMMARY_OUTPUT_ID = 'summary-output';
    // --- End Configuration ---

    const summarizeButton = document.getElementById(SUMMARY_BUTTON_ID);
    const summaryOutput = document.getElementById(SUMMARY_OUTPUT_ID);

    if (!summarizeButton || !summaryOutput) {
        console.error('Summarizer Error: Button or output element not found.');
        return;
    }

    /**
     * Waits for an element matching the selector to appear in the DOM.
     * Handles asynchronously loaded content.
     * @param {string} selector CSS selector for the target element.
     * @param {number} timeout Max time to wait in milliseconds.
     * @returns {Promise<Element>} Resolves with the element or rejects on timeout/error.
     */
    function waitForElement(selector, timeout = 10000) { // Wait up to 10 seconds
        return new Promise((resolve, reject) => {
            const existingElement = document.querySelector(selector);
            if (existingElement) {
                resolve(existingElement);
                return;
            }

            let observer;
            const timer = setTimeout(() => {
                if (observer) observer.disconnect();
                reject(new Error(`Element "${selector}" not found within ${timeout}ms.`));
            }, timeout);

            observer = new MutationObserver((mutations, obs) => {
                const targetElement = document.querySelector(selector);
                if (targetElement) {
                    clearTimeout(timer);
                    obs.disconnect(); // Stop observing once found
                    resolve(targetElement);
                }
            });

            observer.observe(document.body, {
                childList: true, // Watch for nodes being added/removed
                subtree: true    // Watch descendants as well
            });
        });
    }

    /**
     * Extracts visible text content from an element.
     * @param {Element} element The DOM element.
     * @returns {string} The extracted text.
     */
    function getTextFromElement(element) {
        if (!element) return '';
        // innerText tries to replicate rendered text, ignoring hidden elements,
        // considering CSS, and handling line breaks better than textContent for summaries.
        // Trim whitespace at the beginning/end and reduce multiple spaces/newlines.
        return element.innerText?.trim().replace(/\s\s+/g, ' ') || '';
    }

    /**
     * Calls the Cloudflare Worker to get the summary.
     * @param {string} url The URL of the current page.
     * @param {string} text The text content to summarize.
     * @returns {Promise<string>} Resolves with the summary text or rejects with an error message.
     */
    async function fetchSummary(url, text) {
        if (!text) {
            throw new Error("No content found to summarize.");
        }

        try {
            const response = await fetch(WORKER_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: url, // Send the current page URL for caching/whitelist check
                    text: text
                }),
            });

            const result = await response.json();

            if (!response.ok) {
                // Use the error message from the worker if available
                throw new Error(result.error || `API request failed with status ${response.status}`);
            }

            if (!result.summary) {
                 throw new Error("Received empty summary from API.");
            }

            return result.summary; // Assuming the worker returns { "summary": "..." }

        } catch (error) {
            console.error('Summarization API Call Error:', error);
            // Rethrow a user-friendly message
            if (error instanceof SyntaxError) {
                throw new Error("Received an invalid response from the summarizer.");
            }
             // Keep specific errors or generalize
            throw new Error(`Failed to get summary: ${error.message}`);
        }
    }

    // --- Event Listener ---
    summarizeButton.addEventListener('click', async () => {
        // Provide feedback to the user
        summarizeButton.disabled = true;
        summarizeButton.textContent = '正在处理...'; // Change button text to indicate processing
        summaryOutput.style.display = 'none'; // Hide previous result/error
        summaryOutput.classList.remove('error');
        summaryOutput.textContent = '';

        try {
            // 1. Wait for the article content element to be available
            console.log(`Waiting for element: ${ARTICLE_CONTENT_SELECTOR}`);
            const articleElement = await waitForElement(ARTICLE_CONTENT_SELECTOR);
            console.log('Element found:', articleElement);

            // 2. Extract text from the element
            const articleText = getTextFromElement(articleElement);
            console.log(`Extracted text length: ${articleText.length}`);
             if (articleText.length < 50) { // Add a minimum length check if desired
                 throw new Error("Article content is too short to summarize effectively.");
             }

            // 3. Call the summarizer worker
            const currentPageUrl = window.location.href;
            console.log(`Calling worker for URL: ${currentPageUrl}`);
            const summary = await fetchSummary(currentPageUrl, articleText);

            // 4. Display the summary
            summaryOutput.textContent = summary;
            summaryOutput.style.display = 'block';

        } catch (error) {
            console.error('Summarization failed:', error);
            // 5. Display error message
            summaryOutput.textContent = `Error: ${error.message}`;
            summaryOutput.classList.add('error');
            summaryOutput.style.display = 'block';
        } finally {
            // Re-enable the button regardless of success or failure
            summarizeButton.disabled = false;
            summarizeButton.textContent = '重试';
        }
    });

    console.log('Summarizer client script initialized.');

})(); // IIFE to avoid polluting global scope
